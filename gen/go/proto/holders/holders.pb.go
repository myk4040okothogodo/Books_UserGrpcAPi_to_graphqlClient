// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/holders/holders.proto

/*
Package holders is a generated protocol buffer package.

It is generated from these files:
	proto/holders/holders.proto
	proto/holders/holders_messages.proto

It has these top-level messages:
	ListHoldersRequest
	ListHoldersResponse
	GetHolderByBookIdRequest
	GetHolderByBookIdResponse
	GetHolderRequest
	GetHolderResponse
	AddHolderRequest
	AddHolderResponse
	UpdateHolderRequest
	UpdateHolderResponse
	Holder
*/
package holders

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ListHoldersRequest struct {
}

func (m *ListHoldersRequest) Reset()                    { *m = ListHoldersRequest{} }
func (m *ListHoldersRequest) String() string            { return proto.CompactTextString(m) }
func (*ListHoldersRequest) ProtoMessage()               {}
func (*ListHoldersRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ListHoldersResponse struct {
	Holders []*Holder `protobuf:"bytes,1,rep,name=holders" json:"holders,omitempty"`
}

func (m *ListHoldersResponse) Reset()                    { *m = ListHoldersResponse{} }
func (m *ListHoldersResponse) String() string            { return proto.CompactTextString(m) }
func (*ListHoldersResponse) ProtoMessage()               {}
func (*ListHoldersResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ListHoldersResponse) GetHolders() []*Holder {
	if m != nil {
		return m.Holders
	}
	return nil
}

type GetHolderByBookIdRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetHolderByBookIdRequest) Reset()                    { *m = GetHolderByBookIdRequest{} }
func (m *GetHolderByBookIdRequest) String() string            { return proto.CompactTextString(m) }
func (*GetHolderByBookIdRequest) ProtoMessage()               {}
func (*GetHolderByBookIdRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetHolderByBookIdRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetHolderByBookIdResponse struct {
	Holder *Holder `protobuf:"bytes,1,opt,name=holder" json:"holder,omitempty"`
}

func (m *GetHolderByBookIdResponse) Reset()                    { *m = GetHolderByBookIdResponse{} }
func (m *GetHolderByBookIdResponse) String() string            { return proto.CompactTextString(m) }
func (*GetHolderByBookIdResponse) ProtoMessage()               {}
func (*GetHolderByBookIdResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetHolderByBookIdResponse) GetHolder() *Holder {
	if m != nil {
		return m.Holder
	}
	return nil
}

type GetHolderRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *GetHolderRequest) Reset()                    { *m = GetHolderRequest{} }
func (m *GetHolderRequest) String() string            { return proto.CompactTextString(m) }
func (*GetHolderRequest) ProtoMessage()               {}
func (*GetHolderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetHolderRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetHolderResponse struct {
	Holder *Holder `protobuf:"bytes,1,opt,name=holder" json:"holder,omitempty"`
}

func (m *GetHolderResponse) Reset()                    { *m = GetHolderResponse{} }
func (m *GetHolderResponse) String() string            { return proto.CompactTextString(m) }
func (*GetHolderResponse) ProtoMessage()               {}
func (*GetHolderResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *GetHolderResponse) GetHolder() *Holder {
	if m != nil {
		return m.Holder
	}
	return nil
}

type AddHolderRequest struct {
	Holder *Holder `protobuf:"bytes,1,opt,name=holder" json:"holder,omitempty"`
}

func (m *AddHolderRequest) Reset()                    { *m = AddHolderRequest{} }
func (m *AddHolderRequest) String() string            { return proto.CompactTextString(m) }
func (*AddHolderRequest) ProtoMessage()               {}
func (*AddHolderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *AddHolderRequest) GetHolder() *Holder {
	if m != nil {
		return m.Holder
	}
	return nil
}

type AddHolderResponse struct {
	Holder *Holder `protobuf:"bytes,1,opt,name=holder" json:"holder,omitempty"`
}

func (m *AddHolderResponse) Reset()                    { *m = AddHolderResponse{} }
func (m *AddHolderResponse) String() string            { return proto.CompactTextString(m) }
func (*AddHolderResponse) ProtoMessage()               {}
func (*AddHolderResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AddHolderResponse) GetHolder() *Holder {
	if m != nil {
		return m.Holder
	}
	return nil
}

type UpdateHolderRequest struct {
	Holder *Holder `protobuf:"bytes,1,opt,name=holder" json:"holder,omitempty"`
}

func (m *UpdateHolderRequest) Reset()                    { *m = UpdateHolderRequest{} }
func (m *UpdateHolderRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateHolderRequest) ProtoMessage()               {}
func (*UpdateHolderRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UpdateHolderRequest) GetHolder() *Holder {
	if m != nil {
		return m.Holder
	}
	return nil
}

type UpdateHolderResponse struct {
	Holder *Holder `protobuf:"bytes,1,opt,name=holder" json:"holder,omitempty"`
}

func (m *UpdateHolderResponse) Reset()                    { *m = UpdateHolderResponse{} }
func (m *UpdateHolderResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateHolderResponse) ProtoMessage()               {}
func (*UpdateHolderResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *UpdateHolderResponse) GetHolder() *Holder {
	if m != nil {
		return m.Holder
	}
	return nil
}

func init() {
	proto.RegisterType((*ListHoldersRequest)(nil), "tutorial.grpc.holders.v1.ListHoldersRequest")
	proto.RegisterType((*ListHoldersResponse)(nil), "tutorial.grpc.holders.v1.ListHoldersResponse")
	proto.RegisterType((*GetHolderByBookIdRequest)(nil), "tutorial.grpc.holders.v1.GetHolderByBookIdRequest")
	proto.RegisterType((*GetHolderByBookIdResponse)(nil), "tutorial.grpc.holders.v1.GetHolderByBookIdResponse")
	proto.RegisterType((*GetHolderRequest)(nil), "tutorial.grpc.holders.v1.GetHolderRequest")
	proto.RegisterType((*GetHolderResponse)(nil), "tutorial.grpc.holders.v1.GetHolderResponse")
	proto.RegisterType((*AddHolderRequest)(nil), "tutorial.grpc.holders.v1.AddHolderRequest")
	proto.RegisterType((*AddHolderResponse)(nil), "tutorial.grpc.holders.v1.AddHolderResponse")
	proto.RegisterType((*UpdateHolderRequest)(nil), "tutorial.grpc.holders.v1.UpdateHolderRequest")
	proto.RegisterType((*UpdateHolderResponse)(nil), "tutorial.grpc.holders.v1.UpdateHolderResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for HoldersAPI service

type HoldersAPIClient interface {
	// Get all customers
	ListHolders(ctx context.Context, in *ListHoldersRequest, opts ...grpc.CallOption) (*ListHoldersResponse, error)
	// Get customer by book id
	GetHolderByBookId(ctx context.Context, in *GetHolderByBookIdRequest, opts ...grpc.CallOption) (*GetHolderByBookIdResponse, error)
	// Get customer by id
	GetHolder(ctx context.Context, in *GetHolderRequest, opts ...grpc.CallOption) (*GetHolderResponse, error)
	// Add new customer
	AddHolder(ctx context.Context, in *AddHolderRequest, opts ...grpc.CallOption) (*AddHolderResponse, error)
	// Update customer
	UpdateHolder(ctx context.Context, in *UpdateHolderRequest, opts ...grpc.CallOption) (*UpdateHolderResponse, error)
}

type holdersAPIClient struct {
	cc *grpc.ClientConn
}

func NewHoldersAPIClient(cc *grpc.ClientConn) HoldersAPIClient {
	return &holdersAPIClient{cc}
}

func (c *holdersAPIClient) ListHolders(ctx context.Context, in *ListHoldersRequest, opts ...grpc.CallOption) (*ListHoldersResponse, error) {
	out := new(ListHoldersResponse)
	err := grpc.Invoke(ctx, "/tutorial.grpc.holders.v1.HoldersAPI/ListHolders", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holdersAPIClient) GetHolderByBookId(ctx context.Context, in *GetHolderByBookIdRequest, opts ...grpc.CallOption) (*GetHolderByBookIdResponse, error) {
	out := new(GetHolderByBookIdResponse)
	err := grpc.Invoke(ctx, "/tutorial.grpc.holders.v1.HoldersAPI/GetHolderByBookId", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holdersAPIClient) GetHolder(ctx context.Context, in *GetHolderRequest, opts ...grpc.CallOption) (*GetHolderResponse, error) {
	out := new(GetHolderResponse)
	err := grpc.Invoke(ctx, "/tutorial.grpc.holders.v1.HoldersAPI/GetHolder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holdersAPIClient) AddHolder(ctx context.Context, in *AddHolderRequest, opts ...grpc.CallOption) (*AddHolderResponse, error) {
	out := new(AddHolderResponse)
	err := grpc.Invoke(ctx, "/tutorial.grpc.holders.v1.HoldersAPI/AddHolder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *holdersAPIClient) UpdateHolder(ctx context.Context, in *UpdateHolderRequest, opts ...grpc.CallOption) (*UpdateHolderResponse, error) {
	out := new(UpdateHolderResponse)
	err := grpc.Invoke(ctx, "/tutorial.grpc.holders.v1.HoldersAPI/UpdateHolder", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for HoldersAPI service

type HoldersAPIServer interface {
	// Get all customers
	ListHolders(context.Context, *ListHoldersRequest) (*ListHoldersResponse, error)
	// Get customer by book id
	GetHolderByBookId(context.Context, *GetHolderByBookIdRequest) (*GetHolderByBookIdResponse, error)
	// Get customer by id
	GetHolder(context.Context, *GetHolderRequest) (*GetHolderResponse, error)
	// Add new customer
	AddHolder(context.Context, *AddHolderRequest) (*AddHolderResponse, error)
	// Update customer
	UpdateHolder(context.Context, *UpdateHolderRequest) (*UpdateHolderResponse, error)
}

func RegisterHoldersAPIServer(s *grpc.Server, srv HoldersAPIServer) {
	s.RegisterService(&_HoldersAPI_serviceDesc, srv)
}

func _HoldersAPI_ListHolders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListHoldersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoldersAPIServer).ListHolders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tutorial.grpc.holders.v1.HoldersAPI/ListHolders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoldersAPIServer).ListHolders(ctx, req.(*ListHoldersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoldersAPI_GetHolderByBookId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHolderByBookIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoldersAPIServer).GetHolderByBookId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tutorial.grpc.holders.v1.HoldersAPI/GetHolderByBookId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoldersAPIServer).GetHolderByBookId(ctx, req.(*GetHolderByBookIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoldersAPI_GetHolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetHolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoldersAPIServer).GetHolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tutorial.grpc.holders.v1.HoldersAPI/GetHolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoldersAPIServer).GetHolder(ctx, req.(*GetHolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoldersAPI_AddHolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddHolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoldersAPIServer).AddHolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tutorial.grpc.holders.v1.HoldersAPI/AddHolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoldersAPIServer).AddHolder(ctx, req.(*AddHolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _HoldersAPI_UpdateHolder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHolderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HoldersAPIServer).UpdateHolder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tutorial.grpc.holders.v1.HoldersAPI/UpdateHolder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HoldersAPIServer).UpdateHolder(ctx, req.(*UpdateHolderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _HoldersAPI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tutorial.grpc.holders.v1.HoldersAPI",
	HandlerType: (*HoldersAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListHolders",
			Handler:    _HoldersAPI_ListHolders_Handler,
		},
		{
			MethodName: "GetHolderByBookId",
			Handler:    _HoldersAPI_GetHolderByBookId_Handler,
		},
		{
			MethodName: "GetHolder",
			Handler:    _HoldersAPI_GetHolder_Handler,
		},
		{
			MethodName: "AddHolder",
			Handler:    _HoldersAPI_AddHolder_Handler,
		},
		{
			MethodName: "UpdateHolder",
			Handler:    _HoldersAPI_UpdateHolder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/holders/holders.proto",
}

func init() { proto.RegisterFile("proto/holders/holders.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 345 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xcf, 0x4a, 0xc3, 0x30,
	0x1c, 0xc7, 0xd9, 0x94, 0xc9, 0x7e, 0x13, 0xd9, 0xb2, 0x1d, 0x6a, 0xbd, 0x8c, 0xe0, 0x61, 0x4c,
	0x8d, 0xb8, 0x5d, 0xc4, 0xdb, 0x7a, 0xd1, 0xc1, 0x86, 0xb3, 0xb0, 0x8b, 0x17, 0xa9, 0x26, 0xcc,
	0xea, 0x66, 0x6a, 0x93, 0x09, 0x82, 0x2f, 0xe5, 0x1b, 0x0a, 0x6d, 0x52, 0x5b, 0xd7, 0x96, 0x6a,
	0x3d, 0x15, 0x92, 0xef, 0x3f, 0xe8, 0x87, 0xc0, 0x81, 0xe7, 0x73, 0xc9, 0x4f, 0x1f, 0xf9, 0x92,
	0x32, 0x5f, 0xe8, 0x2f, 0x09, 0x4e, 0x91, 0x21, 0xd7, 0x92, 0xfb, 0xae, 0xb3, 0x24, 0x0b, 0xdf,
	0x7b, 0x20, 0xfa, 0xf2, 0xed, 0xcc, 0x3c, 0x4c, 0xb5, 0xdd, 0xad, 0x98, 0x10, 0xce, 0x82, 0x29,
	0x3f, 0xee, 0x00, 0x9a, 0xb8, 0x42, 0x5e, 0x85, 0xb7, 0x36, 0x7b, 0x5d, 0x33, 0x21, 0xf1, 0x0d,
	0xb4, 0x13, 0xa7, 0xc2, 0xe3, 0x2f, 0x82, 0xa1, 0x0b, 0xd8, 0x51, 0x31, 0x46, 0xa5, 0xbb, 0xd5,
	0x6b, 0x0c, 0xba, 0x24, 0xab, 0x9e, 0x84, 0x5e, 0x5b, 0x1b, 0x70, 0x1f, 0x8c, 0x4b, 0xa6, 0x12,
	0xad, 0x77, 0x8b, 0xf3, 0xe7, 0x31, 0x55, 0x75, 0x68, 0x0f, 0xaa, 0x2e, 0x35, 0x2a, 0xdd, 0x4a,
	0xaf, 0x6e, 0x57, 0x5d, 0x8a, 0xe7, 0xb0, 0x9f, 0xa2, 0x55, 0x23, 0xce, 0xa1, 0x16, 0x66, 0x06,
	0x86, 0x22, 0x1b, 0x94, 0x1e, 0x63, 0x68, 0x46, 0xb1, 0x59, 0xd5, 0x53, 0x68, 0xc5, 0x34, 0xa5,
	0x2b, 0x27, 0xd0, 0x1c, 0x51, 0x9a, 0xac, 0xfc, 0x7b, 0xda, 0x14, 0x5a, 0xb1, 0xb4, 0xd2, 0xe3,
	0xae, 0xa1, 0x3d, 0xf7, 0xa8, 0x23, 0xd9, 0x7f, 0xed, 0x9b, 0x41, 0x27, 0x19, 0x58, 0x76, 0xe2,
	0xe0, 0x73, 0x1b, 0x40, 0x51, 0x38, 0x9a, 0x8d, 0xd1, 0x13, 0x34, 0x62, 0x5c, 0xa2, 0xe3, 0xec,
	0x9c, 0x4d, 0xa8, 0xcd, 0x93, 0x82, 0x6a, 0x35, 0xfa, 0x23, 0x46, 0x82, 0x86, 0x10, 0x0d, 0xb2,
	0x33, 0xb2, 0xe8, 0x36, 0x87, 0xbf, 0xf2, 0xa8, 0x76, 0x0a, 0xf5, 0xe8, 0x12, 0xf5, 0x0b, 0x24,
	0xe8, 0xb6, 0xa3, 0x42, 0xda, 0xef, 0x96, 0x08, 0xa8, 0xbc, 0x96, 0x9f, 0x0c, 0xe7, 0xb5, 0x6c,
	0x12, 0xba, 0x82, 0xdd, 0x38, 0x16, 0x28, 0xe7, 0x47, 0xa4, 0xf0, 0x68, 0x92, 0xa2, 0xf2, 0xb0,
	0xce, 0xaa, 0xdf, 0xea, 0x47, 0xe7, 0xbe, 0x16, 0x3c, 0x72, 0xc3, 0xaf, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x7f, 0xbc, 0x92, 0x8f, 0x43, 0x05, 0x00, 0x00,
}
